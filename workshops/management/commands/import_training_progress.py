import csv
import json
from datetime import datetime
from django.db.models import Q

from django.core.management.base import BaseCommand, CommandError

from workshops.models import Event, Person, TrainingProgress, \
    TrainingRequirement, Role, Award, Badge

EXPECTED_HEADER = [
    'Discussion Session',  # column A
    'SWC Pull Request',  # column B
    'DC Exercise',  # column C
    'Personal',  # column D
    'Family',  # column E
    'Email',  # column F
    'Session',  # column G
    'DC',  # column H
    'SWC',  # column I
    'Completion Date',  # column J
    'Completion Flag',  # column K
]

TRAINING_TO_INSTRUCTOR = {
    '2015-10-15-ttt-online': 'Greg Wilson',
    '2015-12-07-eu-instructor-training Paris': 'Stephen Crouch',
    '2015-12-07-eu-instructor-training Potsdam': 'Stephen Crouch',
    '2015-12-07-eu-instructor-training Thessaloniki': 'Stephen Crouch',
    '2015-12-07-na-instructor-training Arlington': 'Christina Koch',
    '2015-12-07-na-instructor-training Vancouver': 'Christina Koch',
    '2015-12-07-na-instructor-training Wisconsin': 'Christina Koch',
    '2015-12-07-ttt-Au': 'Aleksandra Pawlik',
    '2015-12-07-ttt-toronto Curitiba': 'Greg Wilson',
    '2015-12-07-ttt-toronto Toronto': 'Greg Wilson',
    '2016-01-05-ok-instructor-training': 'Christina Koch',
    '2016-01-13-instructor-training-lausanne': 'Aleksandra Pawlik',
    '2016-01-18-brisbane-instructor-training': 'Aleksandra Pawlik',
    '2016-01-21-melbourne-instructor-training': 'Aleksandra Pawlik',
    '2016-01-21-training-florida': 'Greg Wilson',
    '2016-01-28-auckland-instructor-training': 'Aleksandra Pawlik',
    '2016-02-16-training-online': 'Greg Wilson',
    '2016-02-22-training-ucdavis': 'Greg Wilson',
    '2016-03-09-ttt-uw': 'Ariel Rokem',
    '2016-04-13-training-online': 'Greg Wilson',
    '2016-04-17-instructor-training-nwu': 'Aleksandra Pawlik',
    '2016-05-04-instructor-training-ssi': 'Aleksandra Pawlik',
    '2016-05-11-ttt-compute-canada': 'Greg Wilson',
    '2016-05-18-ttt-online': 'Greg Wilson',
    '2016-06-08-ttt-online': 'Greg Wilson',
    '2016-06-08-ttt-arizona': 'Greg Wilson',
    '2016-06-30-Oslo-ttt': 'Christina Koch',
    '2016-07-11-ttt-scipy': 'Ariel Rokem',
}

NOTES = 'This record was automatically generated by import script.'

class RowError(Exception):
    pass


class Command(BaseCommand):
    help = 'Import training progress from a CSV file.'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.errors_occurred = False
        self.row_no = '?'
        self.personal, self.family, self.email = '?', '?', '?'

    def add_arguments(self, parser):
        parser.add_argument(
            'filename', help='CSV file',
        )
        parser.add_argument(
            'trainee2examiner', help='JSON file with map from trainees\' usernames to examiner full names',
        )
        parser.add_argument(
            '--no-dry-run', action='store_true', dest='no-dry-run',
            default=False,
        )

    def warning(self, msg):
        full_msg = 'W Row {:3} {:15} {:20} {:40}: '.format(
            self.row_no + 2, self.personal, self.family, self.email)
        full_msg += msg + '\n'
        self.stdout.write(full_msg)

    def error(self, msg):
        full_msg = 'E Row {:3} {:15} {:20} {:40}: '.format(
            self.row_no + 2, self.personal, self.family, self.email)
        full_msg += msg + '\n'
        self.stderr.write(full_msg)
        self.errors_occurred = True
        raise RowError

    def assert_(self, var_name, flag):
        if not flag:
            self.error('Invalid value of {} variable.'.format(var_name))

    def handle(self, *args, **options):
        trainee2examiner_filename = options['trainee2examiner']
        trainee2swc_examiner, trainee2dc_examiner = \
            self.load_trainee_to_examiner_map(trainee2examiner_filename)

        filename = options['filename']

        dry_run = not options['no-dry-run']

        with open(filename) as s:
            reader = csv.reader(s)

            # Check header (first row with column names)
            header = reader.__next__()
            self.validate_header(header)

            # Pull Requirement and Badge records
            training_requirement = TrainingRequirement.objects.get(name='Training')
            swc_homework = TrainingRequirement.objects.get(name='SWC Homework')
            dc_homework = TrainingRequirement.objects.get(name='DC Homework')
            discussion = TrainingRequirement.objects.get(name='Discussion')
            swc_demo = TrainingRequirement.objects.get(name='SWC Demo')
            dc_demo = TrainingRequirement.objects.get(name='DC Demo')

            swc_instructor_badge = Badge.objects.get(name='swc-instructor')
            dc_instructor_badge = Badge.objects.get(name='dc-instructor')

            # A list of TrainingProgress records that will be bulk added at
            # the end.
            progresses = []

            for self.row_no, row in enumerate(reader):
                try:
                    # Reset state
                    self.personal, self.family, self.email = '?', '?', '?'

                    # Check number of columns
                    if len(row) != len(header):
                        self.error('Invalid row. Different number of columns')

                    # Unpack column values and make initial preprocessing
                    discussion_session = row[0].strip()  # column A: "" or "* withdrawn" or "2016-02-17 Ivan Gonzalez"
                    swc_pull_request = row[1].strip()  # column B: "" or link to SWC homework
                    dc_exercise = row[2].strip()  # column C: "" or "DC submitted"
                    self.personal = row[3].strip()  # column D: always present
                    self.family = row[4].strip()  # column E: always present
                    self.email = row[5].strip().lower()  # column F: always present
                    session = row[6].strip()  # column G: "2015-10-15-ttt-online"
                    dc = row[7].strip().lower()  # column H: "" or "SQL" or "R" or "Python"
                    swc = row[8].strip().lower()  # column I: "" or "Git" or "Shell" or "Python" or "R"
                    raw_completion_date = row[9].strip()  # column J: "" or "2016-03-22"

                    # Validate row
                    self.assert_('swc_pull_request', swc_pull_request == '' or 'http' in swc_pull_request)
                    self.assert_('dc_exercise', dc_exercise in ('', 'DC submitted') or 'http' in dc_exercise)
                    self.assert_('self.personal', self.personal)
                    self.assert_('self.family', self.family)
                    self.assert_('self.email', self.email)
                    self.assert_('self.email', '@' in self.email)
                    self.assert_('dc', dc in ('', 'sql', 'r', 'python', 'openrefine', 'spreadsheets'))
                    self.assert_('swc', swc in ('', 'r', 'python', 'shell', 'git', 'testing'))

                    # Preprocess columns
                    discussion_date, mentor, withdrawn = self.preprocess_discussion_session_column(discussion_session)
                    slug, training = self.preprocess_training_name(session)
                    completion_date = self.preprocess_completion_date(raw_completion_date)

                    # Find instructor, trainee account and examiner
                    instructor = self.find_instructor(session)
                    trainee = self.find_trainee(self.email, self.family, self.personal)
                    swc_examiner_from_JSON = self.find_examiner(trainee2swc_examiner, trainee.username)
                    dc_examiner_from_JSON = self.find_examiner(trainee2dc_examiner, trainee.username)

                    # Find out whether the trainee is certified and by whom
                    swc_awarded, dc_awarded, swc_examiner_from_award, dc_examiner_from_award = \
                        self.check_awards(
                            completion_date, dc, dc_exercise, dc_instructor_badge,
                            swc, swc_instructor_badge, swc_pull_request, trainee)

                    # Find out examiner based on Badge.awarded_by or data from JSON file
                    if swc_awarded and swc_examiner_from_JSON is None and swc_examiner_from_award is None:
                        self.error('Missing trainee in JSON (swc)')
                    if swc_awarded and swc_examiner_from_JSON and swc_examiner_from_award and swc_examiner_from_JSON != swc_examiner_from_award:
                        self.error('Ambiguous swc examiner')
                    if dc_awarded and dc_examiner_from_JSON is None and dc_examiner_from_award is None:
                        self.error('Missing trainee in JSON (dc)')
                    if dc_awarded and dc_examiner_from_JSON and dc_examiner_from_award and dc_examiner_from_JSON != dc_examiner_from_award:
                        self.error('Ambiguous dc examiner')
                    swc_examiner = swc_examiner_from_JSON or swc_examiner_from_award
                    dc_examiner = dc_examiner_from_JSON or dc_examiner_from_award

                except RowError:
                    pass

                else:
                    # Create Training progress record
                    progresses.append(TrainingProgress(
                        trainee=trainee,
                        requirement=training_requirement,
                        evaluated_by=instructor,
                        event=training,
                        discarded=withdrawn,
                        notes=NOTES,
                    ))

                    # Create SWC Homework progress record
                    if swc_pull_request:
                        progresses.append(TrainingProgress(
                            trainee=trainee,
                            requirement=swc_homework,
                            evaluated_by=None,
                            url=swc_pull_request,
                            discarded=withdrawn,
                            notes=NOTES,
                        ))

                    # Create DC Homework progress record
                    if dc_exercise:
                        if dc_exercise == 'DC submitted':
                            url = 'http://datacarpentry.org'
                        else:
                            assert 'http' in dc_exercise
                            url = dc_exercise
                        progresses.append(TrainingProgress(
                            trainee=trainee,
                            requirement=dc_homework,
                            evaluated_by=None,
                            url=url,
                            discarded=withdrawn,
                            notes=NOTES,
                        ))

                    # Create Discussion Session progress record
                    if discussion_date:
                        progresses.append(TrainingProgress(
                            trainee=trainee,
                            requirement=discussion,
                            evaluated_by=mentor,
                            created_at=discussion_date,
                            discarded=withdrawn,
                            notes=NOTES,
                        ))

                    # Create Demo Session progress record
                    if swc_awarded:
                        progresses.append(TrainingProgress(
                            trainee=trainee,
                            requirement=swc_demo,
                            evaluated_by=swc_examiner,
                            discarded=withdrawn,
                            notes=NOTES,
                        ))

                    if dc_awarded:
                        progresses.append(TrainingProgress(
                            trainee=trainee,
                            requirement=dc_demo,
                            evaluated_by=dc_examiner,
                            discarded=withdrawn,
                            notes=NOTES,
                        ))

        if dry_run:
            self.stderr.write('Database wasn\'t altered because this is dry run. Use --no-dry-run parameter to import data.\n')
        elif self.errors_occurred:
            self.stderr.write('Database wasn\'t altered because of errors.\n')
        else:
            self.stdout.write('All data was read from the CSV file. Starting importing data into AMY database.\n')
            TrainingProgress.objects.bulk_create(progresses)
            self.stdout.write('Success. :-)\n')

    def load_trainee_to_examiner_map(self, filename):
        with open(filename) as s:
            data = json.load(s)
            return data['swc-instructor'], data['dc-instructor']

    def validate_header(self, header):
        if header != EXPECTED_HEADER:
            self.stdout.write('Invalid header.\n')
            self.stdout.write('Expected: {}\n'.format(EXPECTED_HEADER))
            self.stdout.write('Got: {}\n'.format(header))
            raise CommandError('Invalid header')

    def preprocess_discussion_session_column(self, discussion_session):
        '''Preprocess value from column A.'''

        if discussion_session == '':
            discussion_date = None
            mentor = None
            withdrawn = False
        elif discussion_session == '* withdrawn':
            discussion_date = None
            mentor = None
            withdrawn = True
        else:  # i.e. "2016-02-17 Ivan Gonzalez"
            withdrawn = False
            try:
                raw_date, mentor_personal, mentor_family = discussion_session.split(' ')
                discussion_date = datetime.strptime(raw_date, '%Y-%m-%d')
            except Exception:
                self.error('Invalid column A value: {}'.format(discussion_session))
                mentor = None
                discussion_date = None
            else:
                if mentor_family == 'Barneche':
                    mentor_family = 'Barneche Rosado'

                try:
                    mentor = Person.objects.get(personal=mentor_personal,
                                                family=mentor_family)
                except Person.DoesNotExist:
                    self.error('Unknown mentor: {} {}'.format(mentor_personal, mentor_family))
                    mentor = None

        return discussion_date, mentor, withdrawn

    def preprocess_training_name(self, session):
        '''Preprocess value from column G.'''

        # split "2015-12-07-na-instructor-training Arlington"
        slug, city = (session + ' ').split(' ', maxsplit=1)

        # find instructor training event
        try:
            training = Event.objects.get(slug=slug)
        except Event.DoesNotExist:
            self.error('No Event slug={}'.format(slug))
            training = None

        return slug, training

    def preprocess_completion_date(self, raw_completion_date):
        '''Preprocess value from column J.'''

        if raw_completion_date == '':
            completion_date = None
        else:
            completion_date = datetime.strptime(raw_completion_date, '%Y-%m-%d')
        return completion_date

    def find_trainee(self, email, family, personal):
        name_match = Q(personal__iexact=personal, family__iexact=family)
        email_match = Q(email__iexact=email)
        try:
            trainee = Person.objects.get(email_match)
        except Person.DoesNotExist:
            try:
                trainee = Person.objects.get(name_match)
            except Person.MultipleObjectsReturned:
                candidates = Person.objects.filter(name_match)
                trainee = None
                self.error('More than one matching trainee.')
            except Person.DoesNotExist:
                trainee = None
                self.error('No such trainee in db.')

        return trainee

    def find_instructor(self, session_name):
        try:
            instructor_name = TRAINING_TO_INSTRUCTOR[session_name]
        except KeyError:
            instructor = None
            self.error('Cannot find instructor -- unknown session slug="{}"'.format(session_name))
        else:
            personal, family = instructor_name.split()
            try:
                instructor = Person.objects.get(personal__iexact=personal,
                                                family__iexact=family)
            except Person.DoesNotExist:
                instructor = None
                self.error('No instructor {} {} in AMY database.')

        return instructor

    def check_awards(self, completion_date, dc, dc_exercise,
                     dc_instructor_badge, swc, swc_instructor_badge,
                     swc_pull_request, trainee):

        # Check SWC awards
        try:
            swc_award = Award.objects.get(person=trainee,
                                          badge=swc_instructor_badge)
        except Award.DoesNotExist:
            swc_awarded = False
            swc_awarded_by = None
            if completion_date and (swc_pull_request or swc):
                self.warning('no swc-instructor awarded')
        else:  # swc-instructor badge awarded
            swc_awarded = True
            swc_awarded_by = swc_award.awarded_by
            if not completion_date:
                self.warning('has swc-instructor but should not have')
            if not swc_pull_request and not swc:
                pass
                # self.warning('has swc-instructor but probably should not have')

        # Check DC awards
        try:
            dc_award = Award.objects.get(person=trainee,
                                         badge=dc_instructor_badge)
        except Award.DoesNotExist:
            dc_awarded = False
            dc_awarded_by = None
            if completion_date and (dc_exercise or dc):
                self.warning('no dc-instructor awarded')
        else:  # dc-instructor badge awarded
            dc_awarded = True
            dc_awarded_by = dc_award.awarded_by
            if not completion_date:
                self.warning('has dc-instructor but should not have')
            if not dc_exercise and not dc:
                pass
                # self.warning('has dc-instructor but probably should not have')

        if completion_date and not swc_awarded and not dc_awarded:
            self.warning('no swc- or dc-instructor awarded')

        return swc_awarded, dc_awarded, swc_awarded_by, dc_awarded_by

    def find_examiner(self, trainee2examiner, trainee_username):
        try:
            examiner_name = trainee2examiner[trainee_username]
        except KeyError:
            examiner = None
        else:
            personal, family = examiner_name.split(' ')
            try:
                examiner = Person.objects.get(personal__iexact=personal,
                                              family__iexact=family)
            except Person.DoesNotExist:
                self.error('No examiner "{}"'.format(examiner_name))

        return examiner
